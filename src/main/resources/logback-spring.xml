<?xml version="1.0" encoding="UTF-8"?>
<configuration>
    <!-- 이 곳에 추가할 기능을 넣는다. -->

    <!-- 화면에 띄울 패턴을 지정한다. -->

    <!--  %d{yyyy-MM-dd HH:mm:ss}:%-4relative : 시간 + 4개의 밀리초-->
    <!--  %red([%thread]) : 실행 스레드 -->
    <!--  %highlight(%-5level) : 로그 레벨 -->
    <!--  %boldWhite([%C.%M:%yellow(%L)]) : 클래스 메서드 실행라인 -->
    <!--  로그 등록한 메세지 개행 라인 -->
    <timestamp key="BY_DATE" datePattern="yyyy-MM-dd"/>
    <property name="LOG_PATTERN" value="[%d{yyyy-MM-dd HH:mm:ss}:%-4relative] %red([%thread]) %highlight(%-5level) %boldWhite([%C.%M:%yellow(%L)]) - %msg%n"/>

    <!-- 로깅 전략 -->
    <!-- dev - 로그 파일을 저장하지 않고 콘솔만 찍는다. -->
    <!-- prod - 로그 파일을 INFO, WARN, ERROR 3가지를 나눠 저장한다. -->

    <!-- dev 환경에서는 로그 파일을 저장하지 않고 콘솔만 찍는다. -->
    <springProfile name="local">

        <!-- 콘솔 로그 처리 -->
        <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">
            <encoder>
                <!-- 위에서 설정한 LOG_PATTERN을 따른다.  -->
                <pattern>${LOG_PATTERN}</pattern>
            </encoder>
        </appender>

        <!-- info level 이상의 log들만 출력을 한다. -->
        <root level="INFO">
            <!-- 지정한 이름을 찾아서 실행시킨다. 없으면 에러를 일으킨다. -->
            <appender-ref ref="STDOUT"/>
        </root>
    </springProfile>

    <!-- prod 환경에서는 로그 파일을 생성해 저장한다. -->
    <springProfile name="dev">

        <!-- 콘솔 로그 처리 -->
        <appender name="STDOUT" class="ch.qos.logback.core.ConsoleAppender">

            <layout class="ch.qos.logback.classic.PatternLayout">
                <Pattern>${LOG_PATTERN}</Pattern>
            </layout>
        </appender>

        <!-- INFO 로그 처리 -->
        <appender name="INFO_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <!-- 파일을 저장할 경로를 정한다 -->
            <file>logs/info/info-${BY_DATE}.log</file>
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <!-- 해당 레벨만 기록한다. -->
                <level>INFO</level>
                <!-- 다른 수준의 레벨은 기록하지 않는다.(상위 레벨도 기록 안함), 상위 수준의 레벨에 대한 기록을 원하면 ACCEPT 로 하면 기록된다. -->
                <!-- onMatch일 때 기록, onMismatch일 때 기록하지 않는다.  -->
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
                <!-- 레벨별 필터링이 필요없을 경우 filter class 관련된 부분을 삭제하면 됨-->

            </filter>
            <encoder>
                <!-- 해당 패턴 네이밍으로 현재 로그가 기록됨 -->
                <pattern>${LOG_PATTERN}</pattern>
            </encoder>
            <!-- Rolling 정책 -->
            <!-- 어떻게 저장할 것인가 -->
            <!-- 시간을 기준으로 저장할 것입니다 -->
            <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
                <!-- 정한 기간동안의 에러를 남김. 년, 월, 일, 분, ex> yyyy-MM-dd-mm -->
                <!-- %i: 롤링 순번을 자동적으로 지정함 (ex) 0, 1, 2 , 3 ...) -->
                <!-- 해당 패턴 네이밍으로 이전 파일이 기록됨 / zip는 압축 저장-->
                <fileNamePattern>log-backup/info/info.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
                <maxFileSize>100MB</maxFileSize> <!-- 한 파일의 최대 용량 -->
                <totalSizeCap>3GB</totalSizeCap>
                <!-- 일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거-->
                <maxHistory>30</maxHistory>
            </rollingPolicy>
        </appender>

        <!-- WARN 로그 처리 -->
        <appender name="WARN_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <file>logs/warn/warn-${BY_DATE}.log</file>
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>WARN</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
            </filter>
            <encoder>
                <pattern>${LOG_PATTERN}</pattern>
            </encoder>
            <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
                <fileNamePattern>log-backup/warn/warn.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
                <maxFileSize>100MB</maxFileSize>
                <totalSizeCap>3GB</totalSizeCap>
                <!-- 일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거-->
                <maxHistory>30</maxHistory>
            </rollingPolicy>
        </appender>

        <!-- ERROR 로그 처리 -->
        <appender name="ERROR_LOG" class="ch.qos.logback.core.rolling.RollingFileAppender">
            <file>logs/error/error-${BY_DATE}.log</file>
            <filter class="ch.qos.logback.classic.filter.LevelFilter">
                <level>ERROR</level>
                <onMatch>ACCEPT</onMatch>
                <onMismatch>DENY</onMismatch>
            </filter>
            <encoder>
                <pattern>${LOG_PATTERN}</pattern>
            </encoder>
            <rollingPolicy class="ch.qos.logback.core.rolling.SizeAndTimeBasedRollingPolicy">
                <fileNamePattern>log-backup/error/error.%d{yyyy-MM-dd}.%i.log</fileNamePattern>
                <maxFileSize>100MB</maxFileSize>
                <totalSizeCap>3GB</totalSizeCap>
                <!-- 일자별 로그파일 최대 보관주기(~일), 해당 설정일 이상된 파일은 자동으로 제거-->
                <maxHistory>30</maxHistory>
            </rollingPolicy>
        </appender>

        <root level="INFO">
            <appender-ref ref="STDOUT"/>
            <appender-ref ref="INFO_LOG"/>
            <appender-ref ref="WARN_LOG"/>
            <appender-ref ref="ERROR_LOG"/>
        </root>

    </springProfile>

</configuration>